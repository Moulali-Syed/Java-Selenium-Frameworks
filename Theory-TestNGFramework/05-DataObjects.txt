Why Data Objects?
instead of using directly passing data , we can pass through JSON


inside pom package , create a package - objects
inside create a class BillingAddress




Create a POJO class by following builder pattern , means each set method will return its class object , that is this
then in the testclass , create object of it and using set methods give values
then in the page object class create a method that accepts the object of the POJO class with all its values

************************************************************************************************************************************

Create a POJO class by following builder pattern , means each set method will return its class object , that is this

POJO class:

package org.selenium.pom.objects;


//with Builder pattern
public class BillingAddress {

	private String firstName;
	private String lastName;
	private String addressLineOne;
	private String city;
	private String postalCode;
	private String email;
	
	
	public String getFirstName() {
		return firstName;
	}
	public BillingAddress setFirstName(String firstName) {
		this.firstName = firstName;
		return this;
	}
	public String getLastName() {
		return lastName;
	}
	public BillingAddress setLastName(String lastName) {
		this.lastName = lastName;
		return this;
	}
	public String getAddressLineOne() {
		return addressLineOne;
	}
	public BillingAddress setAddressLineOne(String addressLineOne) {
		this.addressLineOne = addressLineOne;
		return this;
	}
	public String getCity() {
		return city;
	}
	public BillingAddress setCity(String city) {
		this.city = city;
		return this;
	}
	public String getPostalCode() {
		return postalCode;
	}
	public BillingAddress setPostalCode(String postalCode) {
		this.postalCode = postalCode;
		return this;
	}
	public String getEmail() {
		return email;
	}
	public BillingAddress setEmail(String email) {
		this.email = email;
		return this;
	}
}


************************************************************************************************************************************
then in the testclass , create object of it and using set methods give values


@Test
	public void guestCheckoutUsingDirectBankTransfer() throws InterruptedException {

		BillingAddress billingAddress = new BillingAddress();
		billingAddress.setFirstName("demo");
		billingAddress.setLastName("user");
		billingAddress.setAddressLineOne("San Fransico");
		billingAddress.setCity("San Fransico");
		billingAddress.setPostalCode("94188");
		billingAddress.setEmail("askomdch@gamil.com");
		

		HomePage homePage = new HomePage(driver).load();
		StorePage storePage = homePage.navigateToStoreUsingMenu();

		storePage.search("Blue");

		Assert.assertEquals(storePage.getTitle(), "Search results: “Blue”");
		storePage.clickAddToCartBtn("Blue Shoes");
		Thread.sleep(4000);
		CartPage cartPage = storePage.clickViewCart();

		Assert.assertEquals(cartPage.getProductName(), "Blue Shoes");

		CheckoutPage checkoutPage = cartPage.checkout().setBillingAddress(billingAddress).placeOrder();

		Thread.sleep(5000);
		Assert.assertEquals(checkoutPage.getNotice(), "Thank you. Your order has been received.");

	}


************************************************************************************************************************************

created the method that accepts the POJO class object

	public CheckoutPage setBillingAddress(BillingAddress billingAddress) {
		return enterFirstName(billingAddress.getFirstName())
		.enterLastName(billingAddress.getLastName())
		.enterAddressLineOne(billingAddress.getAddressLineOne())
		.enterCity(billingAddress.getCity())
		.enterPostCode(billingAddress.getPostalCode())
		.enterEmail(billingAddress.getEmail());
	}





package org.selenium.pom.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.selenium.pom.base.BasePage;
import org.selenium.pom.objects.BillingAddress;

public class CheckoutPage extends BasePage {

	public CheckoutPage(WebDriver driver) {
		super(driver);
		// TODO Auto-generated constructor stub
	}

	private final By firstnameFld = By.id("billing_first_name");
	private final By lastNameFld = By.id("billing_last_name");
	private final By addressLineOneFld = By.id("billing_address_1");
	private final By billingCityFld = By.id("billing_city");
	private final By billingPostCodeFld = By.id("billing_postcode");
	private final By billingEmailFld = By.id("billing_email");
	private final By placeOrderBtn = By.id("place_order");
	private final By successNotice = By.cssSelector(".woocommerce-notice");
	private final By showLogin = By.className("showlogin");
	private final By userName = By.id("username");
	private final By password = By.id("password");
	private final By login = By.name("login");


	public CheckoutPage enterFirstName(String firstName) {
		driver.findElement(firstnameFld).sendKeys(firstName);
		return this;
	}

	public CheckoutPage enterLastName(String lastName) {
		driver.findElement(lastNameFld).sendKeys(lastName);
		return this;
	}

	public CheckoutPage enterAddressLineOne(String addressLineOne) {
		driver.findElement(addressLineOneFld).sendKeys(addressLineOne);
		return this;
	}

	public CheckoutPage enterCity(String city) {
		driver.findElement(billingCityFld).sendKeys(city);
		return this;
	}

	public CheckoutPage enterPostCode(String postCode) {
		driver.findElement(billingPostCodeFld).sendKeys(postCode);
		return this;
	}

	public CheckoutPage enterEmail(String email) {
		driver.findElement(billingEmailFld).sendKeys(email);
		return this;
	}
	
	public CheckoutPage placeOrder() {
		driver.findElement(placeOrderBtn).click();
		return this;
	}
	
	public String getNotice() {
		return driver.findElement(successNotice).getText();
	}
	
	public CheckoutPage showLogin() {
		driver.findElement(showLogin).click();
		return this;
	}
	
	public CheckoutPage enterUsername(String txt) {
		driver.findElement(userName).sendKeys(txt);
		return this;
	}
	
	public CheckoutPage enterPassword(String txt) {
		driver.findElement(password).sendKeys(txt);;
		return this;
	}
	
	public CheckoutPage clickLogin() {
		driver.findElement(login).click();
		return this;
	}

	public CheckoutPage setBillingAddress(BillingAddress billingAddress) {
		return enterFirstName(billingAddress.getFirstName())
		.enterLastName(billingAddress.getLastName())
		.enterAddressLineOne(billingAddress.getAddressLineOne())
		.enterCity(billingAddress.getCity())
		.enterPostCode(billingAddress.getPostalCode())
		.enterEmail(billingAddress.getEmail());
	}
}
============================================================================================================================================================
we can create a parameterized constructor of BillingAddress , so that we can directly set values there

public class BillingAddress {

	private String firstName;
	private String lastName;
	private String addressLineOne;
	private String city;
	private String postalCode;
	private String email;
	
	public BillingAddress(String firstName,String lastName,String addressLineOne,String city,String postalCode,String email) {
		
		this.firstName = firstName;
		this.lastName = lastName;
		this.addressLineOne = addressLineOne;
		this.city=city;
		this.postalCode = postalCode;
		this.email = email;
	}
	
	public BillingAddress() {
		
	}
	public String getFirstName() {
		return firstName;
	}
	public BillingAddress setFirstName(String firstName) {
		this.firstName = firstName;
		return this;
	}
	public String getLastName() {
		return lastName;
	}
	public BillingAddress setLastName(String lastName) {
		this.lastName = lastName;
		return this;
	}
	public String getAddressLineOne() {
		return addressLineOne;
	}
	public BillingAddress setAddressLineOne(String addressLineOne) {
		this.addressLineOne = addressLineOne;
		return this;
	}
	public String getCity() {
		return city;
	}
	public BillingAddress setCity(String city) {
		this.city = city;
		return this;
	}
	public String getPostalCode() {
		return postalCode;
	}
	public BillingAddress setPostalCode(String postalCode) {
		this.postalCode = postalCode;
		return this;
	}
	public String getEmail() {
		return email;
	}
	public BillingAddress setEmail(String email) {
		this.email = email;
		return this;
	}
}


now we have the flexibility to pass values in testcase either thru constructor when we create object , or thru methods as we have constructor overloading in BillingAddress

	@Test
	public void guestCheckoutUsingDirectBankTransfer() throws InterruptedException {

/*		BillingAddress billingAddress = new BillingAddress();
		billingAddress.setFirstName("demo");
		billingAddress.setLastName("user");
		billingAddress.setAddressLineOne("San Fransico");
		billingAddress.setCity("San Fransico");
		billingAddress.setPostalCode("94188");
		billingAddress.setEmail("askomdch@gamil.com");*/
		
		BillingAddress billingAddress = new BillingAddress("demo","user","San Fransico","San Fransico","94188","askomdch@gmail.com");
		

		HomePage homePage = new HomePage(driver).load();
		StorePage storePage = homePage.navigateToStoreUsingMenu();

		storePage.search("Blue");

		Assert.assertEquals(storePage.getTitle(), "Search results: “Blue”");
		storePage.clickAddToCartBtn("Blue Shoes");
		Thread.sleep(4000);
		CartPage cartPage = storePage.clickViewCart();

		Assert.assertEquals(cartPage.getProductName(), "Blue Shoes");

		CheckoutPage checkoutPage = cartPage.checkout().setBillingAddress(billingAddress).placeOrder();

		Thread.sleep(5000);
		Assert.assertEquals(checkoutPage.getNotice(), "Thank you. Your order has been received.");

	}

