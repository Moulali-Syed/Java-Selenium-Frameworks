
both the below point to same element
@FindBy(id="foobar") WebElement foobar;
@FindBy(how = How.TAG_NAME , using="a") List<WebElement> links;


both the below point to same list of elements
@FindBy(tagName = "a") List<WebElement> links;
@FindBy(how = How.TAG_NAME,using = "a") List<WebElement> links;


********************************************************************************************************
one of the disadvantage of pagefactory is if the locator to be generated is dynamic ,that is it should generate at run time , then we cannot use pagefactory,but use the By class

for this we should use below way only using By class , with pagefactory we cannot do this
	private By getAddToCartBtnElement(String productName) {
		return By.cssSelector("a[aria-label='Add “" + productName + "” to your cart']");
	}
********************************************************************************************************

package org.selenium.pom.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.selenium.pom.base.BasePage;

public class CartPage extends BasePage {

	private final By productName = By.cssSelector("td[class='product-name'] a");
	private final By checkoutBtn = By.cssSelector(".checkout-button");
	private final By cartHeading = By.cssSelector(".has-text-align-center");
	
	public CartPage(WebDriver driver) {
		super(driver);
	}

	public Boolean isLoaded() {
		//wait for the element that takes more time
		return wait.until(ExpectedConditions.textToBe(cartHeading,"Cart"));
	}
	

	public String getProductName() {
		
		return wait.until(ExpectedConditions.visibilityOfElementLocated(productName)).getText();
//		return driver.findElement(productName).getText();
	}

	public CheckoutPage checkout() {
		//now we can use the explicit wait for the element , whichever to be waited by using the below syntax of explicit wait
		wait.until(ExpectedConditions.elementToBeClickable(checkoutBtn)).click();
//		driver.findElement(checkoutBtn).click();
		return new CheckoutPage(driver);
	}
}




using the page factory

public class CartPage extends BasePage {

	/*private final By productName = By.cssSelector("td[class='product-name'] a");
	private final By checkoutBtn = By.cssSelector(".checkout-button");*/
	private final By cartHeading = By.cssSelector(".has-text-align-center");
	
	@FindBy(css="td[class='product-name'] a") private WebElement productName;
	@FindBy(how = How.CSS ,using=".checkout-button") private WebElement checkoutBtn;
	
	public CartPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);//if we are using Pagefactory in all pages , then we can keep this statement
		//in the BasePage constructor instead duplicating it in all the page classes constructor
	}

	public Boolean isLoaded() {
		//wait for the element that takes more time
		return wait.until(ExpectedConditions.textToBe(cartHeading,"Cart"));
	}
	

	public String getProductName() {
		
		return wait.until(ExpectedConditions.visibilityOf(productName)).getText();
//		return productName.getText();
	}

	public CheckoutPage checkout() {
		//now we can use the explicit wait for the element , whichever to be waited by using the below syntax of explicit wait
		wait.until(ExpectedConditions.elementToBeClickable(checkoutBtn)).click();
//		checkoutBtn.click();
		return new CheckoutPage(driver);
	}
}
********************************************************************************************************
CacheLookup - marker annotation to be applied to webElement to indicate that it never changes (that is same instance in DOM will always be used)

instead of doing api calls everytime , we can cache the element
use CacheLookup only for static elements , dont use for dynamic elements ,if used it may give stale element exception
its usage is just add the tag before the element

	@FindBy(how = How.CSS ,using=".checkout-button") @CacheLookup private WebElement checkoutBtn;

********************************************************************************************************

not any particular difference between By and FindBy , either u can use any of these or u can use both

