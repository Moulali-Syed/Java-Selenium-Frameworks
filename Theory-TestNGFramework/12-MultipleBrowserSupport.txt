if some element is not visible and is going beyond the viewport
then use javascript executor to do actions on that element


private final alternateCountryDropDown = By.id("");
public CheckoutPage selectCountry(String countryName){

	wait.until(ExpectedConditions.elementToBeClickable(By.xpath("")));
	WebElement e = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[text()='"+countryName+"']")));
	((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);",e);
	e.click();
	return this;
}

==============================================================================================================================
Use maven command line to pass browser name:

make the changes in DriverManager class , initializeDriver method

public class DriverManager {

	public WebDriver initializeDriver() {
		
		WebDriver driver;
		//to read comman line arguments
		String browser = System.getProperty("browser");
		switch(browser) {
		case "Chrome":
			WebDriverManager.chromedriver().cachePath("Drivers").setup();
			driver = new ChromeDriver();
			break;
			
		case "Firefox":
			WebDriverManager.firefoxdriver().cachePath("Drivers").setup();
			driver = new FirefoxDriver();
			break;
		default:
			throw new IllegalStateException("Invalid browser name: "+browser);
		}

		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
		return driver;
	}
}


and in the command line , pass the command

mvn clean test -Dbrowser=Chrome
or
mvn clean test -Dbrowser=Firefox
==============================================================================================================================
Using ENUM for browser name:

we may do mistake , by changing case of the browser name , so change the browser to lower case before sending to switch statements

		switch(browser.toLowerCase()) {
		case "chrome":
			WebDriverManager.chromedriver().cachePath("Drivers").setup();
			driver = new ChromeDriver();
			break;
			
		case "firefox":
			WebDriverManager.firefoxdriver().cachePath("Drivers").setup();
			driver = new FirefoxDriver();
			break;
		default:
			throw new IllegalStateException("Invalid browser name: "+browser);
		}


the another option we can use ENUM
create a package inside pom - constants
create a enum

public enum BrowserType {
	
	CHROME,
	FIREFOX

}


public class DriverManager {

	public WebDriver initializeDriver() {
		
		WebDriver driver;
		//to read comman line arguments
		String browser = System.getProperty("browser");
		
		switch(BrowserType.valueOf(browser)) {
		case CHROME:
			WebDriverManager.chromedriver().cachePath("Drivers").setup();
			driver = new ChromeDriver();
			break;
			
		case FIREFOX:
			WebDriverManager.firefoxdriver().cachePath("Drivers").setup();
			driver = new FirefoxDriver();
			break;
		default:
			throw new IllegalStateException("Invalid browser name: "+browser);
		}

		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
		return driver;
	}
}

this enforces some format to follow

==============================================================================================================================
Use JVM argument and default browser:

now if we run thru IDE , then it will not run as we r not passing any browser thru command line

one option is to send a default browser argument

String browser = System.getProperty("browser","CHROME");

public class DriverManager {

	public WebDriver initializeDriver() {
		
		WebDriver driver;
		//to read comman line arguments
		String browser = System.getProperty("browser","CHROME");
		
		switch(BrowserType.valueOf(browser)) {
		case CHROME:
			WebDriverManager.chromedriver().cachePath("Drivers").setup();
			driver = new ChromeDriver();
			break;
			
		case FIREFOX:
			WebDriverManager.firefoxdriver().cachePath("Drivers").setup();
			driver = new FirefoxDriver();
			break;
		default:
			throw new IllegalStateException("Invalid browser name: "+browser);
		}

		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
		return driver;
	}
}



the other option is JVM configuration:
goto project - right click --> modify run configurations | or Run Configurations

Run- Run configuurations --> TestNG --> JDK Settings [VM options -   -ea -Dbrowser=FIREFOX

Apply and OK








==============================================================================================================================